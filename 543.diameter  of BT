/**
We can solve this problem with two different cases:

    If the longest path will include the root node, then the longest path must be the depth(root->right) + depth (root->left)
    If the longest path does not include the root node, this problem is divided into 2 sub-problem: set left child and right child as the new root separately, and repeat step1.

We could get the solution by returning the max path of 1 and 2.
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public static int height(TreeNode root)
    {
        if(root==null)return 0;
        
        else return 1+ Math.max(height(root.left),height(root.right));
    }
    public int diameterOfBinaryTree(TreeNode root) {
        if(root==null)return 0;
        
        int lh=height(root.left);
        int rh=height(root.right);
        
        int ld=diameterOfBinaryTree(root.left);
        int rd=diameterOfBinaryTree(root.right);
        
        return Math.max(lh+rh,Math.max(ld,rd));// return Math.max(lh+rh +1,Math.max(ld,rd)); ?  
        
        
    }
}

Given a non-empty integer array of size n, find the minimum number of moves required to make all array elements equal, where a move is incrementing n - 1 elements by 1.

Input:
[1,2,3]

Output:
3

Explanation:
Only three moves are needed (remember each move increments two elements):

[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]

//think in reverse manner -  Think about it, because all you could do is the decrement by 1, there is simply no better way, therefore the answer is simply the difference between every element with the minimum, or more conveniently, sum of all elements minus the minimum times the number of element.


public class Solution {
    public int minMoves(int[] nums) {
        Arrays.sort(nums);
        int sum=0;
       for(int i=1;i<nums.length;i++)
       {
           sum+=nums[i]-nums[0];
       }
        return sum;
    }
}

Without sorting: in o(n) 
public class Solution {
    public int minMoves(int[] nums) {
        int moves=0;
        int min=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            if(nums[i]<min)
            min=nums[i];
        }
        for(int i=0;i<nums.length;i++)
        {
            moves+=nums[i]-min;
        }
        return moves;
        
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isPalindrome(ListNode head) {
        
    Stack<Integer> st=new Stack<Integer>();
    ListNode x=head;
    while(x!=null)
    {
       st.push(x.val);
       x=x.next;
        
    }
    boolean a=true;
    while(head!=null)
    {
       Integer q=(Integer)st.pop();
        if(q!=head.val)
        {
            a=false;
            break;
        }
        head=head.next;
    }
    return a;
        
    }
}


//recurssive solution
public class Solution {
    public ListNode left;
        
        
    public boolean isPalindrome(ListNode head) {
        if(head==null ||head.next==null)
        return true;
        left=head;
        return helper(head);
        
        
    }
    boolean helper(ListNode right)
    { 
        if(right ==null)
        return true;
        
        boolean x=helper(right.next);
        if(!x)
        return false;
        
        boolean y=right.val==left.val;
        
        left=left.next;
        return y;
    }
}


//break second half
public boolean isPalindrome(ListNode head) {
 
    if(head == null || head.next==null)
        return true;
 
    //find list center
    ListNode fast = head;
    ListNode slow = head;
 
    while(fast.next!=null && fast.next.next!=null){
        fast = fast.next.next;
        slow = slow.next;
    }
 
    ListNode secondHead = slow.next;
    slow.next = null;
 
    //reverse second part of the list
    ListNode p1 = secondHead;
    ListNode p2 = p1.next;
 
    while(p1!=null && p2!=null){
        ListNode temp = p2.next;
        p2.next = p1;
        p1 = p2;
        p2 = temp;
    }
 
    secondHead.next = null;
 
    //compare two sublists now
    ListNode p = (p2==null?p1:p2);
    ListNode q = head;
    while(p!=null){
        if(p.val != q.val)
            return false;
 
        p = p.next;
        q = q.next;
 
    }
 
    return true;
}
